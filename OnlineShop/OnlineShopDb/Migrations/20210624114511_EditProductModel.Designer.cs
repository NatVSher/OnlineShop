// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineShop.Db;

namespace OnlineShop.Db.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20210624114511_EditProductModel")]
    partial class EditProductModel
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("OnlineShop.Db.Models.Basket", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.BasketItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<Guid?>("BasketId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("OrderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BasketId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketItem");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.ContactDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactDetails");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.FavoriteProduct", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Favorites");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ContactDataId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("DateOrder")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<string>("TimeOrder")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ContactDataId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImagePath3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("631d5747-a4bd-45b1-a730-0147c83a0865"),
                            Cost = 700m,
                            Description = "Эта медитация поможет избавиться от стресса.",
                            ImagePath1 = "/imajes/стресс.jpg",
                            Name = "Избавление от стресса"
                        },
                        new
                        {
                            Id = new Guid("8560b5fa-d3cb-4fc6-838c-374059e93de9"),
                            Cost = 500m,
                            Description = "Поменяет отношение к богатсву.",
                            ImagePath1 = "/imajes/деньги.jpg",
                            Name = "Принятие изобилия"
                        },
                        new
                        {
                            Id = new Guid("a1179f8d-fe7c-47e5-9fdd-d4574b530ad7"),
                            Cost = 800m,
                            Description = "SPA для души.",
                            ImagePath1 = "/imajes/изобилие.jpg",
                            Name = "Женская энергия"
                        },
                        new
                        {
                            Id = new Guid("fc0fec93-31e3-413d-9ea6-d759157e47a5"),
                            Cost = 500m,
                            Description = "Эта медитация поможет вам притянуть в вашу жизнь заветные желания.",
                            ImagePath1 = "/imajes/желания.jpg",
                            Name = "Притяжение желаний"
                        },
                        new
                        {
                            Id = new Guid("5eae7488-8eec-4650-8be4-44497eced24b"),
                            Cost = 900m,
                            Description = "Поможет приобрести сторойное тело в согласии с душой",
                            ImagePath1 = "/imajes/стройное.jpg",
                            Name = "Стройное тело"
                        },
                        new
                        {
                            Id = new Guid("49874016-6395-49ed-9357-2e5e6766ca5b"),
                            Cost = 1000m,
                            Description = "Восстановление силы рода, исцеление рродовых программ.",
                            ImagePath1 = "/imajes/род.jpg",
                            Name = "Энергия рода"
                        },
                        new
                        {
                            Id = new Guid("beaa27d2-18d5-4585-8657-956e7a1c5266"),
                            Cost = 800m,
                            Description = "Новолуние  - отличное время для обновления энергетики и поиска путей развития",
                            ImagePath1 = "/imajes/денежн круг.jpe",
                            Name = "Денежная медитация на новолуние"
                        },
                        new
                        {
                            Id = new Guid("26eab4d1-7080-4238-90b2-b8234b7ec1a9"),
                            Cost = 990m,
                            Description = "Позволит расширить денежную ёмкость",
                            ImagePath1 = "/imajes/денежная емкость.jpg",
                            Name = "Расширение денежной емкости"
                        });
                });

            modelBuilder.Entity("OnlineShop.Db.Models.ProductCompared", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductsCompared");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.BasketItem", b =>
                {
                    b.HasOne("OnlineShop.Db.Models.Basket", null)
                        .WithMany("Items")
                        .HasForeignKey("BasketId");

                    b.HasOne("OnlineShop.Db.Models.Order", null)
                        .WithMany("Items")
                        .HasForeignKey("OrderId");

                    b.HasOne("OnlineShop.Db.Models.Product", "Product")
                        .WithMany("BasketItem")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.FavoriteProduct", b =>
                {
                    b.HasOne("OnlineShop.Db.Models.Product", "Product")
                        .WithMany("Favorites")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Order", b =>
                {
                    b.HasOne("OnlineShop.Db.Models.ContactDetails", "ContactData")
                        .WithMany()
                        .HasForeignKey("ContactDataId");

                    b.Navigation("ContactData");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.ProductCompared", b =>
                {
                    b.HasOne("OnlineShop.Db.Models.Product", "Product")
                        .WithMany("ProductsCompared")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Basket", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("OnlineShop.Db.Models.Product", b =>
                {
                    b.Navigation("BasketItem");

                    b.Navigation("Favorites");

                    b.Navigation("ProductsCompared");
                });
#pragma warning restore 612, 618
        }
    }
}
